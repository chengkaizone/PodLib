//
//  CustomShader_GLES.swift
//  LineVideo
//
//  Created by tony on 2018/1/14.
//  Copyright © 2018年 chengkaizone. All rights reserved.
//

import Foundation

// blackboardLarge  blackboard1024
// overlayMap
// vignetteMap

public let LY1977FragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    texel = vec3( \n    texture2D(inputImageTexture2, vec2(texel.r, .16666)).r, \n    texture2D(inputImageTexture2, vec2(texel.g, .5)).g, \n    texture2D(inputImageTexture2, vec2(texel.b, .83333)).b); \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYAmaroFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n \n void main() \n { \n     \n    vec4 texel = texture2D(inputImageTexture, textureCoordinate); \n    vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb; \n     \n    texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r; \n    texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g; \n    texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b; \n     \n    vec4 mapped; \n    mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r; \n    mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g; \n    mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b; \n    mapped.a = 1.0; \n     \n    gl_FragColor = mapped; \n }"

public let LYBrannanFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n uniform sampler2D inputImageTexture5; \n uniform sampler2D inputImageTexture6; \n \n mat3 saturateMatrix = mat3( \n    1.105150, \n    -0.044850, \n    -0.046000, \n    -0.088050, \n    1.061950, \n    -0.089200, \n    -0.017100, \n    -0.017100, \n    1.132900); \n \n vec3 luma = vec3(.3, .59, .11); \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    vec2 lookup; \n    lookup.y = 0.5; \n    lookup.x = texel.r; \n    texel.r = texture2D(inputImageTexture2, lookup).r; \n    lookup.x = texel.g; \n    texel.g = texture2D(inputImageTexture2, lookup).g; \n    lookup.x = texel.b; \n    texel.b = texture2D(inputImageTexture2, lookup).b; \n     \n    texel = saturateMatrix * texel; \n     \n     \n    vec2 tc = (2.0 * textureCoordinate) - 1.0; \n    float d = dot(tc, tc); \n    vec3 sampled; \n    lookup.y = 0.5; \n    lookup.x = texel.r; \n    sampled.r = texture2D(inputImageTexture3, lookup).r; \n    lookup.x = texel.g; \n    sampled.g = texture2D(inputImageTexture3, lookup).g; \n    lookup.x = texel.b; \n    sampled.b = texture2D(inputImageTexture3, lookup).b; \n    float value = smoothstep(0.0, 1.0, d); \n    texel = mix(sampled, texel, value); \n     \n    lookup.x = texel.r; \n    texel.r = texture2D(inputImageTexture4, lookup).r; \n    lookup.x = texel.g; \n    texel.g = texture2D(inputImageTexture4, lookup).g; \n    lookup.x = texel.b; \n    texel.b = texture2D(inputImageTexture4, lookup).b; \n     \n     \n    lookup.x = dot(texel, luma); \n    texel = mix(texture2D(inputImageTexture5, lookup).rgb, texel, .5); \n     \n    lookup.x = texel.r; \n    texel.r = texture2D(inputImageTexture6, lookup).r; \n    lookup.x = texel.g; \n    texel.g = texture2D(inputImageTexture6, lookup).g; \n    lookup.x = texel.b; \n    texel.b = texture2D(inputImageTexture6, lookup).b; \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYEarlybirdFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n uniform sampler2D inputImageTexture5; \n uniform sampler2D inputImageTexture6; \n \n const mat3 saturate = mat3( \n    1.210300, \n    -0.089700, \n    -0.091000, \n    -0.176100, \n    1.123900, \n    -0.177400, \n    -0.034200, \n    -0.034200, \n    1.265800); \n const vec3 rgbPrime = vec3(0.25098, 0.14640522, 0.0); \nconst vec3 desaturate = vec3(.3, .59, .11); \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n     \n    vec2 lookup; \n    lookup.y = 0.5; \n     \n    lookup.x = texel.r; \n    texel.r = texture2D(inputImageTexture2, lookup).r; \n     \n    lookup.x = texel.g; \n    texel.g = texture2D(inputImageTexture2, lookup).g; \n     \n    lookup.x = texel.b; \n    texel.b = texture2D(inputImageTexture2, lookup).b; \n     \n    float desaturatedColor; \n    vec3 result; \n    desaturatedColor = dot(desaturate, texel); \n     \n     \n    lookup.x = desaturatedColor; \n    result.r = texture2D(inputImageTexture3, lookup).r; \n    lookup.x = desaturatedColor; \n    result.g = texture2D(inputImageTexture3, lookup).g; \n    lookup.x = desaturatedColor; \n    result.b = texture2D(inputImageTexture3, lookup).b; \n     \n    texel = saturate * mix(texel, result, .5); \n     \n    vec2 tc = (2.0 * textureCoordinate) - 1.0; \n    float d = dot(tc, tc); \n     \n    vec3 sampled; \n    lookup.y = .5; \n     \n    lookup = vec2(d, texel.r); \n    texel.r = texture2D(inputImageTexture4, lookup).r; \n    lookup.y = texel.g; \n    texel.g = texture2D(inputImageTexture4, lookup).g; \n    lookup.y = texel.b; \n    texel.b    = texture2D(inputImageTexture4, lookup).b; \n    float value = smoothstep(0.0, 1.25, pow(d, 1.35)/1.65); \n     \n    lookup.x = texel.r; \n    sampled.r = texture2D(inputImageTexture5, lookup).r; \n    lookup.x = texel.g; \n    sampled.g = texture2D(inputImageTexture5, lookup).g; \n    lookup.x = texel.b; \n    sampled.b = texture2D(inputImageTexture5, lookup).b; \n    texel = mix(sampled, texel, value); \n     \n     \n    lookup.x = texel.r; \n    texel.r = texture2D(inputImageTexture6, lookup).r; \n    lookup.x = texel.g; \n    texel.g = texture2D(inputImageTexture6, lookup).g; \n    lookup.x = texel.b; \n    texel.b = texture2D(inputImageTexture6, lookup).b; \n     \n    gl_FragColor = vec4(texel, 1.0); \n \n }"

public let LYHefeFragmentShader = " precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n uniform sampler2D inputImageTexture5; \n uniform sampler2D inputImageTexture6; \n \n void main() \n    { \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n    vec3 edge = texture2D(inputImageTexture2, textureCoordinate).rgb; \n    texel = texel * edge; \n     \n    texel = vec3( \n    texture2D(inputImageTexture3, vec2(texel.r, .16666)).r, \n    texture2D(inputImageTexture3, vec2(texel.g, .5)).g, \n    texture2D(inputImageTexture3, vec2(texel.b, .83333)).b); \n     \n    vec3 luma = vec3(.30, .59, .11); \n    vec3 gradSample = texture2D(inputImageTexture4, vec2(dot(luma, texel), .5)).rgb; \n    vec3 final = vec3( \n    texture2D(inputImageTexture5, vec2(gradSample.r, texel.r)).r, \n    texture2D(inputImageTexture5, vec2(gradSample.g, texel.g)).g, \n    texture2D(inputImageTexture5, vec2(gradSample.b, texel.b)).b \n    ); \n     \n    vec3 metal = texture2D(inputImageTexture6, textureCoordinate).rgb; \n    vec3 metaled = vec3( \n    texture2D(inputImageTexture5, vec2(metal.r, texel.r)).r, \n    texture2D(inputImageTexture5, vec2(metal.g, texel.g)).g, \n    texture2D(inputImageTexture5, vec2(metal.b, texel.b)).b \n    ); \n     \n    gl_FragColor = vec4(metaled, 1.0); \n }"

public let LYHudsonFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n \n void main() \n    { \n     \n    vec4 texel = texture2D(inputImageTexture, textureCoordinate); \n     \n    vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb; \n     \n    texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r; \n    texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g; \n    texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b; \n     \n    vec4 mapped; \n    mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r; \n    mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g; \n    mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b; \n    mapped.a = 1.0; \n    gl_FragColor = mapped; \n }"

public let LYInkwellFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n \n void main() \n    { \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n    texel = vec3(dot(vec3(0.3, 0.6, 0.1), texel)); \n    texel = vec3(texture2D(inputImageTexture2, vec2(texel.r, .16666)).r); \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYLomofiFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    vec2 red = vec2(texel.r, 0.16666); \n    vec2 green = vec2(texel.g, 0.5); \n    vec2 blue = vec2(texel.b, 0.83333); \n     \n    texel.rgb = vec3( \n    texture2D(inputImageTexture2, red).r, \n    texture2D(inputImageTexture2, green).g, \n    texture2D(inputImageTexture2, blue).b); \n     \n    vec2 tc = (2.0 * textureCoordinate) - 1.0; \n    float d = dot(tc, tc); \n    vec2 lookup = vec2(d, texel.r); \n    texel.r = texture2D(inputImageTexture3, lookup).r; \n    lookup.y = texel.g; \n    texel.g = texture2D(inputImageTexture3, lookup).g; \n    lookup.y = texel.b; \n    texel.b    = texture2D(inputImageTexture3, lookup).b; \n     \n    gl_FragColor = vec4(texel,1.0); \n }"

public let LYLordKelvinFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n \n void main() \n    { \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    vec2 lookup; \n    lookup.y = .5; \n     \n    lookup.x = texel.r; \n    texel.r = texture2D(inputImageTexture2, lookup).r; \n     \n    lookup.x = texel.g; \n    texel.g = texture2D(inputImageTexture2, lookup).g; \n     \n    lookup.x = texel.b; \n    texel.b = texture2D(inputImageTexture2, lookup).b; \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYNashvilleFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n \n void main() \n    { \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n    texel = vec3( \n    texture2D(inputImageTexture2, vec2(texel.r, .16666)).r, \n    texture2D(inputImageTexture2, vec2(texel.g, .5)).g, \n    texture2D(inputImageTexture2, vec2(texel.b, .83333)).b); \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYNormalFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYRiseFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n \n void main() \n    { \n     \n    vec4 texel = texture2D(inputImageTexture, textureCoordinate); \n    vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb; \n     \n    texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r; \n    texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g; \n    texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b; \n     \n    vec4 mapped; \n    mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r; \n    mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g; \n    mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b; \n    mapped.a = 1.0; \n     \n    gl_FragColor = mapped; \n }"

public let LYSierraFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n \n void main() \n    { \n     \n    vec4 texel = texture2D(inputImageTexture, textureCoordinate); \n    vec3 bbTexel = texture2D(inputImageTexture2, textureCoordinate).rgb; \n     \n    texel.r = texture2D(inputImageTexture3, vec2(bbTexel.r, texel.r)).r; \n    texel.g = texture2D(inputImageTexture3, vec2(bbTexel.g, texel.g)).g; \n    texel.b = texture2D(inputImageTexture3, vec2(bbTexel.b, texel.b)).b; \n     \n    vec4 mapped; \n    mapped.r = texture2D(inputImageTexture4, vec2(texel.r, .16666)).r; \n    mapped.g = texture2D(inputImageTexture4, vec2(texel.g, .5)).g; \n    mapped.b = texture2D(inputImageTexture4, vec2(texel.b, .83333)).b; \n    mapped.a = 1.0; \n     \n    gl_FragColor = mapped; \n }"

public let LYSutroFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n uniform sampler2D inputImageTexture5; \n uniform sampler2D inputImageTexture6; \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    vec2 tc = (2.0 * textureCoordinate) - 1.0; \n    float d = dot(tc, tc); \n    vec2 lookup = vec2(d, texel.r); \n    texel.r = texture2D(inputImageTexture2, lookup).r; \n    lookup.y = texel.g; \n    texel.g = texture2D(inputImageTexture2, lookup).g; \n    lookup.y = texel.b; \n    texel.b    = texture2D(inputImageTexture2, lookup).b; \n     \n    vec3 rgbPrime = vec3(0.1019, 0.0, 0.0); \n    float m = dot(vec3(.3, .59, .11), texel.rgb) - 0.03058; \n    texel = mix(texel, rgbPrime + m, 0.32); \n     \n    vec3 metal = texture2D(inputImageTexture3, textureCoordinate).rgb; \n    texel.r = texture2D(inputImageTexture4, vec2(metal.r, texel.r)).r; \n    texel.g = texture2D(inputImageTexture4, vec2(metal.g, texel.g)).g; \n    texel.b = texture2D(inputImageTexture4, vec2(metal.b, texel.b)).b; \n     \n    texel = texel * texture2D(inputImageTexture5, textureCoordinate).rgb; \n     \n    texel.r = texture2D(inputImageTexture6, vec2(texel.r, .16666)).r; \n    texel.g = texture2D(inputImageTexture6, vec2(texel.g, .5)).g; \n    texel.b = texture2D(inputImageTexture6, vec2(texel.b, .83333)).b; \n     \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYToasterFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n uniform sampler2D inputImageTexture4; \n uniform sampler2D inputImageTexture5; \n uniform sampler2D inputImageTexture6; \n \n void main() \n    { \n    lowp vec3 texel; \n    mediump vec2 lookup; \n    vec2 blue; \n    vec2 green; \n    vec2 red; \n    lowp vec4 tmpvar_1; \n    tmpvar_1 = texture2D (inputImageTexture, textureCoordinate); \n    texel = tmpvar_1.xyz; \n    lowp vec4 tmpvar_2; \n    tmpvar_2 = texture2D (inputImageTexture2, textureCoordinate); \n    lowp vec2 tmpvar_3; \n    tmpvar_3.x = tmpvar_2.x; \n    tmpvar_3.y = tmpvar_1.x; \n    texel.x = texture2D (inputImageTexture3, tmpvar_3).x; \n    lowp vec2 tmpvar_4; \n    tmpvar_4.x = tmpvar_2.y; \n    tmpvar_4.y = tmpvar_1.y; \n    texel.y = texture2D (inputImageTexture3, tmpvar_4).y; \n    lowp vec2 tmpvar_5; \n    tmpvar_5.x = tmpvar_2.z; \n    tmpvar_5.y = tmpvar_1.z; \n    texel.z = texture2D (inputImageTexture3, tmpvar_5).z; \n    red.x = texel.x; \n    red.y = 0.16666; \n    green.x = texel.y; \n    green.y = 0.5; \n    blue.x = texel.z; \n    blue.y = 0.833333; \n    texel.x = texture2D (inputImageTexture4, red).x; \n    texel.y = texture2D (inputImageTexture4, green).y; \n    texel.z = texture2D (inputImageTexture4, blue).z; \n    mediump vec2 tmpvar_6; \n    tmpvar_6 = ((2.0 * textureCoordinate) - 1.0); \n    mediump vec2 tmpvar_7; \n    tmpvar_7.x = dot (tmpvar_6, tmpvar_6); \n    tmpvar_7.y = texel.x; \n    lookup = tmpvar_7; \n    texel.x = texture2D (inputImageTexture5, tmpvar_7).x; \n    lookup.y = texel.y; \n    texel.y = texture2D (inputImageTexture5, lookup).y; \n    lookup.y = texel.z; \n    texel.z = texture2D (inputImageTexture5, lookup).z; \n    red.x = texel.x; \n    green.x = texel.y; \n    blue.x = texel.z; \n    texel.x = texture2D (inputImageTexture6, red).x; \n    texel.y = texture2D (inputImageTexture6, green).y; \n    texel.z = texture2D (inputImageTexture6, blue).z; \n    lowp vec4 tmpvar_8; \n    tmpvar_8.w = 1.0; \n    tmpvar_8.xyz = texel; \n    gl_FragColor = tmpvar_8; \n }"

public let LYValenciaFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n \nmat3 saturateMatrix = mat3( \n    1.1402, \n    -0.0598, \n    -0.061, \n    -0.1174, \n    1.0826, \n    -0.1186, \n    -0.0228, \n    -0.0228, \n    1.1772); \n \n vec3 lumaCoeffs = vec3(.3, .59, .11); \n \n void main() \n    { \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    texel = vec3( \n    texture2D(inputImageTexture2, vec2(texel.r, .1666666)).r, \n    texture2D(inputImageTexture2, vec2(texel.g, .5)).g, \n    texture2D(inputImageTexture2, vec2(texel.b, .8333333)).b \n    ); \n     \n    texel = saturateMatrix * texel; \n    float luma = dot(lumaCoeffs, texel); \n    texel = vec3( \n    texture2D(inputImageTexture3, vec2(luma, texel.r)).r, \n    texture2D(inputImageTexture3, vec2(luma, texel.g)).g, \n    texture2D(inputImageTexture3, vec2(luma, texel.b)).b); \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYWaldenFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    texel = vec3( \n    texture2D(inputImageTexture2, vec2(texel.r, .16666)).r, \n    texture2D(inputImageTexture2, vec2(texel.g, .5)).g, \n    texture2D(inputImageTexture2, vec2(texel.b, .83333)).b); \n     \n    vec2 tc = (2.0 * textureCoordinate) - 1.0; \n    float d = dot(tc, tc); \n    vec2 lookup = vec2(d, texel.r); \n    texel.r = texture2D(inputImageTexture3, lookup).r; \n    lookup.y = texel.g; \n    texel.g = texture2D(inputImageTexture3, lookup).g; \n    lookup.y = texel.b; \n    texel.b    = texture2D(inputImageTexture3, lookup).b; \n     \n    gl_FragColor = vec4(texel, 1.0); \n }"

public let LYXprollFragmentShader = "precision lowp float; \n \n varying highp vec2 textureCoordinate; \n \n uniform sampler2D inputImageTexture; \n uniform sampler2D inputImageTexture2; \n uniform sampler2D inputImageTexture3; \n \n void main() \n    { \n     \n    vec3 texel = texture2D(inputImageTexture, textureCoordinate).rgb; \n     \n    vec2 tc = (2.0 * textureCoordinate) - 1.0; \n    float d = dot(tc, tc); \n    vec2 lookup = vec2(d, texel.r); \n    texel.r = texture2D(inputImageTexture3, lookup).r; \n    lookup.y = texel.g; \n    texel.g = texture2D(inputImageTexture3, lookup).g; \n    lookup.y = texel.b; \n    texel.b    = texture2D(inputImageTexture3, lookup).b; \n     \n    vec2 red = vec2(texel.r, 0.16666); \n    vec2 green = vec2(texel.g, 0.5); \n    vec2 blue = vec2(texel.b, .83333); \n    texel.r = texture2D(inputImageTexture2, red).r; \n    texel.g = texture2D(inputImageTexture2, green).g; \n    texel.b = texture2D(inputImageTexture2, blue).b; \n     \n    gl_FragColor = vec4(texel, 1.0); \n     \n }"






